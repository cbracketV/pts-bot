# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import common_pb2 as proto_dot_common__pb2
from . import neighbor_pb2 as proto_dot_neighbor__pb2


class NeighborFacadeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetConnectability = channel.unary_unary(
                '/bluetooth.neighbor.NeighborFacade/SetConnectability',
                request_serializer=proto_dot_neighbor__pb2.EnableMsg.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Empty.FromString,
                )
        self.SetDiscoverability = channel.unary_unary(
                '/bluetooth.neighbor.NeighborFacade/SetDiscoverability',
                request_serializer=proto_dot_neighbor__pb2.DiscoverabilitiyMsg.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Empty.FromString,
                )
        self.SetInquiryMode = channel.unary_stream(
                '/bluetooth.neighbor.NeighborFacade/SetInquiryMode',
                request_serializer=proto_dot_neighbor__pb2.InquiryMsg.SerializeToString,
                response_deserializer=proto_dot_neighbor__pb2.InquiryResultMsg.FromString,
                )
        self.ReadRemoteName = channel.unary_unary(
                '/bluetooth.neighbor.NeighborFacade/ReadRemoteName',
                request_serializer=proto_dot_neighbor__pb2.RemoteNameRequestMsg.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Empty.FromString,
                )
        self.GetRemoteNameEvents = channel.unary_stream(
                '/bluetooth.neighbor.NeighborFacade/GetRemoteNameEvents',
                request_serializer=proto_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_neighbor__pb2.RemoteNameResponseMsg.FromString,
                )
        self.EnableInquiryScan = channel.unary_unary(
                '/bluetooth.neighbor.NeighborFacade/EnableInquiryScan',
                request_serializer=proto_dot_neighbor__pb2.EnableMsg.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Empty.FromString,
                )
        self.EnablePageScan = channel.unary_unary(
                '/bluetooth.neighbor.NeighborFacade/EnablePageScan',
                request_serializer=proto_dot_neighbor__pb2.EnableMsg.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Empty.FromString,
                )


class NeighborFacadeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetConnectability(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDiscoverability(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetInquiryMode(self, request, context):
        """Sets inquiry mode and fetches inquiry result HCI packet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRemoteName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRemoteNameEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableInquiryScan(self, request, context):
        """TODO: Should we use a blocking call for ReadRemoteName instead? (Note: blocking model may not work for GD stack)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnablePageScan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NeighborFacadeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetConnectability': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConnectability,
                    request_deserializer=proto_dot_neighbor__pb2.EnableMsg.FromString,
                    response_serializer=proto_dot_common__pb2.Empty.SerializeToString,
            ),
            'SetDiscoverability': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDiscoverability,
                    request_deserializer=proto_dot_neighbor__pb2.DiscoverabilitiyMsg.FromString,
                    response_serializer=proto_dot_common__pb2.Empty.SerializeToString,
            ),
            'SetInquiryMode': grpc.unary_stream_rpc_method_handler(
                    servicer.SetInquiryMode,
                    request_deserializer=proto_dot_neighbor__pb2.InquiryMsg.FromString,
                    response_serializer=proto_dot_neighbor__pb2.InquiryResultMsg.SerializeToString,
            ),
            'ReadRemoteName': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRemoteName,
                    request_deserializer=proto_dot_neighbor__pb2.RemoteNameRequestMsg.FromString,
                    response_serializer=proto_dot_common__pb2.Empty.SerializeToString,
            ),
            'GetRemoteNameEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetRemoteNameEvents,
                    request_deserializer=proto_dot_common__pb2.Empty.FromString,
                    response_serializer=proto_dot_neighbor__pb2.RemoteNameResponseMsg.SerializeToString,
            ),
            'EnableInquiryScan': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableInquiryScan,
                    request_deserializer=proto_dot_neighbor__pb2.EnableMsg.FromString,
                    response_serializer=proto_dot_common__pb2.Empty.SerializeToString,
            ),
            'EnablePageScan': grpc.unary_unary_rpc_method_handler(
                    servicer.EnablePageScan,
                    request_deserializer=proto_dot_neighbor__pb2.EnableMsg.FromString,
                    response_serializer=proto_dot_common__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bluetooth.neighbor.NeighborFacade', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NeighborFacade(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetConnectability(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluetooth.neighbor.NeighborFacade/SetConnectability',
            proto_dot_neighbor__pb2.EnableMsg.SerializeToString,
            proto_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDiscoverability(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluetooth.neighbor.NeighborFacade/SetDiscoverability',
            proto_dot_neighbor__pb2.DiscoverabilitiyMsg.SerializeToString,
            proto_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetInquiryMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bluetooth.neighbor.NeighborFacade/SetInquiryMode',
            proto_dot_neighbor__pb2.InquiryMsg.SerializeToString,
            proto_dot_neighbor__pb2.InquiryResultMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadRemoteName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluetooth.neighbor.NeighborFacade/ReadRemoteName',
            proto_dot_neighbor__pb2.RemoteNameRequestMsg.SerializeToString,
            proto_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRemoteNameEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bluetooth.neighbor.NeighborFacade/GetRemoteNameEvents',
            proto_dot_common__pb2.Empty.SerializeToString,
            proto_dot_neighbor__pb2.RemoteNameResponseMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableInquiryScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluetooth.neighbor.NeighborFacade/EnableInquiryScan',
            proto_dot_neighbor__pb2.EnableMsg.SerializeToString,
            proto_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnablePageScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bluetooth.neighbor.NeighborFacade/EnablePageScan',
            proto_dot_neighbor__pb2.EnableMsg.SerializeToString,
            proto_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
